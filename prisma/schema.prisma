generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  username       String         @unique
  password       String
  firstName      String
  lastName       String
  email          String         @unique
  phoneNumber    String         @unique
  dateCreated    DateTime       @default(now())
  leaveBalance   Int
  leaveRequests  LeaveRequest[] @relation("UserLeaveRequests")
  digilocker     Digilocker[]   @relation("UserDigilocker")
  documents      Document[]     @relation("UserDocuments")
  tickets        Ticket[]       @relation("UserTickets")
  messages       Message[]      @relation("UserMessages")
  role           String         @default("EMPLOYEE")
  dob            DateTime?
  address        String?
  qualifications String?
  department     String?
  position       String?
  hrDocuments    HrDocument[]   @relation("UserHrDocuments")
}

model LeaveRequest {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  reason        String
  startDate     DateTime
  endDate       DateTime
  requestStatus String    @default("Pending")
  dateCreated   DateTime  @default(now())
  dateResponded DateTime?
  User          User      @relation("UserLeaveRequests", fields: [userUsername], references: [username], onDelete: Cascade)
  userUsername  String
}

model Digilocker {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String?
  size         Int?
  mimetype     String?
  data         Bytes?
  dateCreated  DateTime @default(now())
  userUsername String
  user         User     @relation("UserDigilocker", fields: [userUsername], references: [username], onDelete: Cascade)
}

model HrDocument {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  filename          String
  submittedBy       String // This should be the username of the user
  submitterFullName String
  department        String
  position          String
  dateSubmitted     DateTime
  fileSize          Int?
  data              Bytes?
  status            String   @default("Pending") // Add status field
  rejectionReason   String? // Optional field for rejection reason
  user              User     @relation("UserHrDocuments", fields: [submittedBy], references: [username], onDelete: Cascade)
}

model Document {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  data         Bytes
  dateCreated  DateTime @default(now())
  userUsername String
  User         User     @relation("UserDocuments", fields: [userUsername], references: [username], onDelete: Cascade)
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  text        String
  dateCreated DateTime @default(now())
  role        String
}

model Ticket {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  subject      String
  status       String    @default("Unresolved")
  messages     Message[] @relation("TicketMessages")
  dateCreated  DateTime  @default(now())
  userUsername String
  User         User      @relation("UserTickets", fields: [userUsername], references: [username], onDelete: Cascade)
}

model Message {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketId     String   @db.ObjectId
  Ticket       Ticket   @relation("TicketMessages", fields: [ticketId], references: [id], onDelete: Cascade)
  text         String
  dateCreated  DateTime @default(now())
  userUsername String
  User         User     @relation("UserMessages", fields: [userUsername], references: [username], onDelete: Cascade)
}
