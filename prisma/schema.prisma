generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum QualificationLevel {
  Schooling
  Graduate
  Masters
  Doctorate
  Other
}

enum UserRole {
  EMPLOYEE
  HR
  ADMIN
}

enum Gender {
  M
  F
  Other
}

enum MaritalStatus {
  Married
  Unmarried
}

enum WorkLocation {
  NaviMumbai
  Delhi
  Kochi
  Remote
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  UNKNOWN
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  OTHER
}

enum Position {
  Software_Development_Engineer
  Embedded_Software_Development_Engineer
  Hardware_Engineer
  Chief_Technology_Officer
  Chief_Executive_Officer
  Project_Manager
}

enum Department {
  Admin
  HR
  Software
  Hardware
  Production
}

enum DocumentCategory {
  // **Identity Documents**
  aadhaar_card
  pan_card
  passport
  voter_id
  driving_license
  other_identity_documents

  // **Educational Documents**
  tenth_marksheet
  twelfth_marksheet
  graduation_degree
  masters_degree
  postgraduate_degree
  diploma_certificate
  educational_transcript
  other_educational_documents

  // **Employment Documents**
  resume
  previous_employment_certificate
  experience_letter
  relieving_letter
  salary_slip
  offer_letter
  appointment_letter
  employment_contract
  other_employment_documents

  // **Certification Documents**
  professional_certifications
  language_certifications
  technical_certifications
  industry_specific_certifications
  other_certifications

  // **Address Proof Documents**
  utility_bill
  rental_agreement
  bank_statement
  passport_copy
  ration_card
  lease_agreement
  other_address_proof

  // **Skills Documents**
  portfolio
  project_documents
  skill_certificates
  training_completion_certificates
  other_skills_documents

  // **Financial Documents**
  form_16
  it_return
  bank_passbook
  canceled_cheque
  salary_certificate
  other_financial_documents

  // **Insurance Documents**
  health_insurance_policy
  life_insurance_policy
  motor_insurance
  other_insurance_documents

  // **Legal Documents**
  nda_agreement
  legal_contracts
  court_clearance_certificate
  police_clearance_certificate
  other_legal_documents

  // **Professional Licenses**
  engineering_license
  medical_license
  teaching_license
  other_professional_licenses

  // **Company-Specific Documents**
  signed_policies
  employee_handbook
  non_disclosure_agreement
  non_compete_agreement
  other_company_documents

  // **Dependents' Documents**
  spouse_aadhaar_card
  spouse_pan_card
  child_birth_certificate
  child_school_certificate
  other_dependents_documents

  // **Additional Documents**
  photo
  medical_certificate
  reference_letters
  birth_certificate
  marriage_certificate
  resignation_letter
  other_documents
  others
}

// ──────────────────────────────────────────────────────────
// Models
// ──────────────────────────────────────────────────────────

model User {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  username           String             @unique
  password           String
  firstName          String
  middleName         String?
  lastName           String
  email              String             @unique
  phoneNumber        String             @unique
  dateCreated        DateTime           @default(now())
  leaveBalance       Int                @default(28)
  role               UserRole           @default(EMPLOYEE)
  dob                DateTime?
  residentialAddress Json?
  permanentAddress   Json?
  department         Department?
  position           Position?
  nationality        String?
  gender             Gender?
  maritalStatus      MaritalStatus?
  bloodGroup         BloodGroup?        @default(UNKNOWN)
  joiningDate        DateTime?
  employmentType     EmploymentType?
  workLocation       WorkLocation?
  profileImageUrl    String?
  avatarImageUrl     String?
  isFirstTime        Boolean?           @default(true)

  // Relations
  leaveRequests      LeaveRequest[]     @relation("UserLeaveRequests")
  digilocker         Digilocker[]       @relation("UserDigilocker")
  documents          Document[]         @relation("UserDocuments")
  tickets            Ticket[]           @relation("UserTickets")
  messages           Message[]          @relation("UserMessages")
  hrDocuments        HrDocument[]       @relation("UserHrDocuments")
  otps               OTP[]              @relation("UserOTPs")
  qualifications     Qualification[]    @relation("UserQualifications")
  employeeDocuments  EmployeeDocument[] @relation("UserEmployeeDocuments")
  attendances        Attendance[]       @relation("UserAttendances")
  experiences        Experience[]       @relation("UserExperiences")
  certifications     Certification[]    @relation("UserCertifications")
  auditLogs          AuditLog[]         @relation("UserAuditLogs")
  emergencyContacts  EmergencyContact[] @relation("UserEmergencyContacts")
  notifications      Notification[]     @relation("UserNotifications")

  @@index([email, phoneNumber], name: "user_contact_index")
}

model Notification {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  message           String
  createdAt         DateTime @default(now())
  isRead            Boolean  @default(false)

  recipientUsername String
  recipient         User     @relation("UserNotifications", fields: [recipientUsername], references: [username], onDelete: Cascade)

  @@index([recipientUsername])
}

model EmergencyContact {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  relationship String
  phoneNumber  String
  email        String?
  userUsername String
  user         User   @relation("UserEmergencyContacts", fields: [userUsername], references: [username], onDelete: Cascade)
}

model Qualification {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  level           QualificationLevel
  name            String?
  specializations String[]
  institution     String?
  startDate       DateTime?
  endDate         DateTime?
  username        String
  user            User               @relation("UserQualifications", fields: [username], references: [username], onDelete: Cascade)

  @@index([username])
}

model Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle    String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  username    String
  user        User     @relation("UserExperiences", fields: [username], references: [username], onDelete: Cascade)

  @@index([username])
}

model Certification {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  issuingAuthority String
  licenseNumber    String?
  expiryDate       DateTime?
  username         String
  user             User     @relation("UserCertifications", fields: [username], references: [username], onDelete: Cascade)
  issueDate        DateTime?

  @@index([username])
}

model EmployeeDocument {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  fileType     String?
  data         Bytes
  size         Int
  dateUploaded DateTime        @default(now())
  userUsername String
  category     DocumentCategory?

  user User @relation("UserEmployeeDocuments", fields: [userUsername], references: [username], onDelete: Cascade)
}

model LeaveRequest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  reason        String
  startDate     DateTime
  endDate       DateTime
  requestStatus String   @default("Pending")
  dateCreated   DateTime @default(now())
  dateResponded DateTime?
  userUsername  String
  user          User     @relation("UserLeaveRequests", fields: [userUsername], references: [username], onDelete: Cascade)
}

model Digilocker {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String?
  size         Int?
  mimetype     String?
  data         Bytes?
  dateCreated  DateTime @default(now())
  userUsername String
  user         User     @relation("UserDigilocker", fields: [userUsername], references: [username], onDelete: Cascade)
}

model HrDocument {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  filename          String
  submittedBy       String
  submitterFullName String
  department        String
  position          String
  dateSubmitted     DateTime
  fileSize          Int?
  data              Bytes?
  status            String   @default("Pending")
  rejectionReason   String?
  user              User?    @relation("UserHrDocuments", fields: [submittedBy], references: [username], onDelete: Cascade)
}

model Document {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  data         Bytes
  dateCreated  DateTime @default(now())
  userUsername String
  user         User     @relation("UserDocuments", fields: [userUsername], references: [username], onDelete: Cascade)
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  text        String
  dateCreated DateTime @default(now())
  role        String
}

model Ticket {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  subject      String
  status       String    @default("Unresolved")
  messages     Message[] @relation("TicketMessages")
  dateCreated  DateTime  @default(now())
  userUsername String
  user         User      @relation("UserTickets", fields: [userUsername], references: [username], onDelete: Cascade)
}

model Message {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketId     String   @db.ObjectId
  ticket       Ticket   @relation("TicketMessages", fields: [ticketId], references: [id], onDelete: Cascade)
  text         String
  dateCreated  DateTime @default(now())
  userUsername String
  user         User     @relation("UserMessages", fields: [userUsername], references: [username], onDelete: Cascade)
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  otp       String
  createdAt DateTime @default(now())
  user      User     @relation("UserOTPs", fields: [userId], references: [id], onDelete: Cascade)
}

model Attendance {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime
  checkInTime       DateTime?
  checkOutTime      DateTime?
  checkInLatitude   Float?
  checkInLongitude  Float?
  checkOutLatitude  Float?
  checkOutLongitude Float?

  // New fields for check-in and check-out addresses
  checkInAddress    String?
  checkOutAddress   String?

  userUsername      String
  user              User     @relation("UserAttendances", fields: [userUsername], references: [username], onDelete: Cascade)

  @@unique([userUsername, date])
}

// ──────────────────────────────────────────────────────────
// AuditLog Model
// ──────────────────────────────────────────────────────────

model AuditLog {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userUsername   String?
  user           User?    @relation("UserAuditLogs", fields: [userUsername], references: [username], onDelete: Cascade)

  action         String
  performedBy    String
  targetUsername String?
  datePerformed  DateTime @default(now())
  details        String
}
